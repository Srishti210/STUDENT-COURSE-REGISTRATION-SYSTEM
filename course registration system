public class Course {
    private String courseCode;
    private String title;
    private String description;
    private int capacity;
    private String schedule;

    // Constructor
    public Course(String courseCode, String title, String description, int capacity, String schedule) {
        this.courseCode = courseCode;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
    }

    // Getters and setters (if needed)
    // ...
}
public class Student {
    private int studentId;
    private String name;
    private List<Course> registeredCourses;

    // Constructor
    public Student(int studentId, String name) {
        this.studentId = studentId;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    // Methods to register and drop courses
    public void registerCourse(Course course) {
        registeredCourses.add(course);
    }

    public void dropCourse(Course course) {
        registeredCourses.remove(course);
    }

    // Getters (if needed)
    // ...
}
public class CourseManager {
    private List<Course> courses;

    public CourseManager() {
        this.courses = new ArrayList<>();
    }

    public void addCourse(Course course) {
        courses.add(course);
    }

    public void displayAvailableCourses() {
        for (Course course : courses) {
            System.out.println("Course Code: " + course.getCourseCode());
            System.out.println("Title: " + course.getTitle());
            System.out.println("Description: " + course.getDescription());
            System.out.println("Available Slots: " + (course.getCapacity() - getRegisteredCount(course)));
            System.out.println();
        }
    }

    private int getRegisteredCount(Course course) {
        // Implement logic to count registered students for a course
        // You can maintain a separate list of registered students or use other data structures
        return 0; // Placeholder
    }
}
